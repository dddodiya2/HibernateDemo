ORM

Object Relational Mapping 

Its a methodology to map the programming world objects to DB world Relations/Entities. 

Object Relational Mapping (ORM) is a functionality which is used to develop and maintain 
a relationship between an object and relational database by mapping an object state to 
database column. It is capable to handle various database operations easily such as 
inserting, updating, deleting etc.

----------------------------------------------------------------------------------------------

JPA - Java Persistance API(Application Programming Interface)

API  --> its a group of classes and interfaces which provides some useful utilities 


Student s = new Student(....................);

JPA ---> Hibernate 

Hibernate is an implementation of JPA.

----------------------------------------------------------------------------------------------



Database table :-

create table STUDENT
	(std_id Integer, NOT_NULL, AUTO_INCREMENT,
		Name VARCHAR(20),
		Branch VARCHAR(10),
		YOP integer,
		primary_key(std_id)
 	);
	
	
	
	
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
JPA terms and meanings :-

Entity :- 	
An entity is a lightweight persistence domain object. 
Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. The primary programming artifact of an entity is the entity class, although entities can use helper classes.

The persistent state of an entity is represented through either persistent fields or persistent properties. These fields or properties use object/relational mapping annotations to map the entities and entity relationships to the relational data in the underlying data store.

Requirements for Entity Classes
An entity class must follow these requirements.

The class must be annotated with the javax.persistence.Entity annotation.

The class must have a public or protected, no-argument constructor. The class may have other constructors.

The class must not be declared final. No methods or persistent instance variables must be declared final.

Persistent instance variables must be declared private, protected, or package-private and can be accessed directly only by the entity class’s methods. Clients must access the entity’s state through getters and setters or other provided methods.

An Entity class may have below types of fields :
Java primitive types

java.lang.String

Other serializable types, including:
Wrappers of Java primitive types  --> Integer, Long , 
java.math.BigInteger
java.math.BigDecimal
java.util.Date
java.util.Calendar
java.sql.Date
java.sql.Time
java.sql.TimeStamp
User-defined serializable types
byte[]
Byte[]
char[]
Character[]
Enumerated types
Other entities and/or collections of entities
Embeddable classes
----------------------------------------------------------------------------------------------
JPA Annotations Descriptions:-
@Entity - This is a marker annotation which indicates that this class is an entity. This annotation must be placed on the class name.
@Id - This annotation is placed on a specific field that holds the persistent identifying properties. This field is treated as a primary key in database.
@Table -	This annotation specifies to declare table name.
@GeneratedValue	- This annotation specifies, how the identity attribute can be initialized such as Automatic, manual, or value taken from sequence table.
@Column -	This annotation is used to specify column or attribute for persistence property.

@Embedded	This annotation specifies the properties of class or an entity whose value instance of an embeddable class.
@Transient	This annotation specifies the property which in not persistent i.e. the value is never stored into database.
@SequenceGenerator	This annotation is used to define the value for the property which is specified in @GeneratedValue annotation. It creates a sequence.
@TableGenerator	This annotation is used to specify the value generator for property specified in @GeneratedValue annotation. It creates a table for value generation.
@AccessType	This type of annotation is used to set the access type. If you set @AccessType(FIELD) then Field wise access will occur. If you set @AccessType(PROPERTY) then Property wise assess will occur.
@JoinColumn	This annotation is used to specify an entity association or entity collection. This is used in many- to-one and one-to-many associations.
@UniqueConstraint	This annotation is used to specify the field, unique constraint for primary or secondary table.
@ColumnResult	This annotation references the name of a column in the SQL query using select clause.
@ManyToMany	This annotation is used to define a many-to-many relationship between the join Tables.
@ManyToOne	This annotation is used to define a many-to-one relationship between the join Tables.
@OneToMany	This annotation is used to define a one-to-many relationship between the join Tables.
@OneToOne	This annotation is used to define a one-to-one relationship between the join Tables.
@NamedQueries	This annotation is used for specifying list of named queries.
@NamedQuery	This annotation is used for specifying a Query using static name.


----------------------------------------------------------------------------------------------